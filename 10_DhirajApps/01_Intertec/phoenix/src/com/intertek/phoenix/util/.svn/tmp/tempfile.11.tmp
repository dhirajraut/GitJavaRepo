/**
 * @Company: Intertek
 * @Project : Phoenix 2.0 for Commercial and Electronics
 * @Copyright: Intertek 2009
 */
package com.intertek.phoenix.util;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.PropertyResourceBundle;
import java.util.Random;
import java.util.ResourceBundle;

import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;

import com.intertek.phoenix.entity.BillingStatus;
import com.intertek.phoenix.entity.CEJobOrderLineItem;
import com.intertek.phoenix.entity.InvoiceStatus;
import com.intertek.phoenix.entity.InvoiceType;
import com.intertek.phoenix.entity.JobTest;
import com.intertek.phoenix.entity.OperationalStatus;
import com.intertek.phoenix.entity.OrderOrigin;
import com.intertek.phoenix.entity.OrderStatus;
import com.intertek.phoenix.entity.PaymentStatus;
import com.intertek.phoenix.entity.PaymentType;
import com.intertek.phoenix.entity.ProjectType;
import com.intertek.phoenix.entity.SourceOrigin;

/**
 * 
 * @author richard.qin
 */
public class CommonUtil {
    //private static PropertyResourceBundle pRB = (PropertyResourceBundle) ResourceBundle.getBundle("config");

    /** The label resource bundle. */
    private static PropertyResourceBundle lrb = (PropertyResourceBundle) ResourceBundle.getBundle("TrackerRes");

    private static Random rnd = new Random(System.currentTimeMillis());

    public static String getConfigValue(String name) {
        try {
            //System.out.println("config name is" + pRB.getString(name));
            //return pRB.getString(name);
            return null;
        }
        catch (Exception e) {
            return "";
        }
    }

    /**
     * Gets the labels from TrackerRes.properties
     * 
     * @param name
     *            the name
     * 
     * @return the label
     */
    public static String getTrackerResValue(String name) {
        try {
            return lrb.getString(name);
        }
        catch (Exception e) {
            return "";
        }
    }

    /**
     * Loads tabular data from a csv file into a list of String arrays
     * 
     * @param dataPath
     * @param limit
     * @return
     */
    @SuppressWarnings("unchecked")
    public static List<String[]> loadFromCsv(String dataPath, int limit) {
        CSVReader reader = null;
        try {
            reader = new CSVReader(new FileReader(dataPath), ',');
            List<String[]> csvdata = null;
            if (limit > 0) {
                csvdata = new ArrayList<String[]>();
                for (int k = 0; k < limit; k++) {
                    String[] line = reader.readNext();
                    if (line == null) {
                        // there is less data than I expect to read
                        break;
                    }
                    csvdata.add(line);
                }
            }
            else {
                csvdata = reader.readAll();
            }
            return csvdata;
        }
        catch (FileNotFoundException e) {
            e.printStackTrace();
            return null;
        }
        catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        finally {
            if (reader != null) {
                try {
                    reader.close();
                }
                catch (IOException ignore) {
                }
            }
        }
    }

    /**
     * Saves a list of flattened objects to a csv file. If it succeeds, the
     * orinial contents (if any) will be replaced by new ones. If it fails, the
     * original contents is not touched.
     * 
     * @param dataPath
     * @param list
     * @return true if succeeds; otherwise, false
     */
    public static boolean saveToCsv(String dataPath, String[] fieldNames, List<String[]> list) {
        CSVWriter writer = null;
        try {
            //File tempCsv = File.createTempFile(CommonUtil.getConfigValue("CSV_TEMP_FILE"), ".csv");
            File tempCsv = File.createTempFile("phxcsv", ".csv");
//            File tempCsv = File.createTempFile("phxcsv", ".csv");
            writer = new CSVWriter(new FileWriter(tempCsv));
            // write headers
            writer.writeNext(fieldNames);
            // write values
            writer.writeAll(list);
            writer.close();
            writer = null;
            // remove the old one if exists
            File targetCsv = new File(dataPath);
            if (targetCsv.exists()) {
                targetCsv.delete();
            }
            // rename the temp file to the target name
            boolean ok = tempCsv.renameTo(targetCsv);
            if (!ok) {
                System.out.println("Failed to create file: " + targetCsv);
            }
        }
        catch (IOException e) {
            e.printStackTrace();
            return false;
        }
        finally {
            if (writer != null) {
                try {
                    writer.close();
                }
                catch (IOException ignore) {
                }
            }
        }
        return true;
    }

    /**
     * This is a temporary measure to generate a "unique" numeric id. For the
     * real hibernate implementation, this method will become a no-op and always
     * return 0, so the hibernate id generator can function accordingly.
     * <p>
     * TODO make it responsive to the choice of dao implementation. TODO
     * consider the strategy pattern here to make it more elegant.
     * 
     * @return
     */
    public static long generateId() {
        return Math.abs(rnd.nextInt());
    }

    /**
     * This is a temporary measure to generate a "unique" string id. For the
     * real hibernate implementation, this method will become a no-op and always
     * return null, so the hibernate id generator can function accordingly.
     * <p>
     * TODO make it responsive to the choice of dao implementation. TODO
     * consider the strategy pattern here to make it more elegant.
     * 
     * @return
     */
    public static String generateIdCode() {
        return "PHX-" + Integer.toString(Math.abs(rnd.nextInt()));
    }

    /**
     * A null-safe version of toString() which always convert a null string into
     * an empty string.
     * 
     * @param value
     * @return
     */
    public static String toString(Object value) {
        if (value == null) {
            return "";
        }
        else {
            return value.toString();
        }
    }

    /**
     * Convert a string value to its corresponding primitive value or object
     * value.
     * 
     * @param cls
     * @param content
     * @param pos
     * @return
     */
    public static Object stringToObject(Class<?> cls, String value) {
        Object result = null;
        if (value.length() > 0) {
            if (cls.equals(long.class) || cls.equals(Long.class)) {
                result = Long.valueOf(value);
            }
            else if (cls.equals(int.class) || cls.equals(Integer.class)) {
                result = Integer.valueOf(value);
            }
            else if (cls.equals(double.class) || cls.equals(Double.class)) {
                result = Double.valueOf(value);
            }
            else if (cls.equals(boolean.class) || cls.equals(Boolean.class)) {
                result = Boolean.valueOf(value);
            }
            else if (cls.equals(BigDecimal.class)) {
                result = new BigDecimal(value);
            }
            else if (cls.equals(Timestamp.class)) {
                result = Timestamp.valueOf(value);
            }
            else if (cls.isEnum() && value.length() > 0) { // I wish there is a
                                                            // better way to
                                                            // handle enum
                if (cls.equals(BillingStatus.class)) {
                    result = BillingStatus.valueOf(value);
                }
                else if (cls.equals(InvoiceStatus.class)) {
                    result = InvoiceStatus.valueOf(value);
                }
                else if (cls.equals(InvoiceType.class)) {
                    result = InvoiceType.valueOf(value);
                }
                else if (cls.equals(OperationalStatus.class)) {
                    result = OperationalStatus.valueOf(value);
                }
                else if (cls.equals(OrderOrigin.class)) {
                    result = OrderOrigin.valueOf(value);
                }
                else if (cls.equals(OrderStatus.class)) {
                    result = OrderStatus.valueOf(value);
                }
                else if (cls.equals(PaymentStatus.class)) {
                    result = PaymentStatus.valueOf(value);
                }
                else if (cls.equals(PaymentType.class)) {
                    result = PaymentType.valueOf(value);
                }
                else if (cls.equals(ProjectType.class)) {
                    result = ProjectType.valueOf(value);
                }
                else if (cls.equals(SourceOrigin.class)) {
                    result = SourceOrigin.valueOf(value);
                }
                else {

                }
            }
            else if (cls.equals(String.class)) {
                result = value;
            }
        }
        return result;
    }

    /**
     * A simple method that checks if <code>one</code> is part of
     * <code>many</code>
     * 
     * @param one
     * @param many
     * @return
     */
    public static boolean isOneOf(Object one, Object[] many) {
        if (one == null) {
            return false;
        }
        else {
            for (Object obj : many) {
                if (one.equals(obj)) {
                    return true;
                }
            }
            return false;
        }
    }

    /**
     * Check if a given type is a "simple" type.
     * <p>
     * A simple is one of String, Long, Double, Integer, BigDecimal, Timestamp
     * and Boolean. Simple types can be mapped to SQL column types.
     * 
     * @param fieldCls
     * @return
     */
    public static boolean isSimpleType(Class<?> fieldCls) {
        if (fieldCls.isPrimitive() || fieldCls.equals(String.class) || fieldCls.equals(Long.class) || fieldCls.equals(Double.class)
            || fieldCls.equals(Integer.class) || fieldCls.equals(BigDecimal.class) || fieldCls.equals(Timestamp.class) || fieldCls.equals(Boolean.class)) {

            return true;
        }
        return false;
    }

    /**
     * Returns all declared fields of the given class and its ancestor classes
     * into a provided <code>list</code>
     * 
     * @return
     */
    public static List<Field> getAllDeclaredFields(List<Field> list, Class<?> cls) {
        Field[] fields = cls.getDeclaredFields();
        for (Field field : fields) {
            int mod = field.getModifiers();
            if ((mod & Modifier.STATIC) != Modifier.STATIC) {
                list.add(field);
            }
        }
        Class<?> parentCls = cls.getSuperclass();
        if (!parentCls.equals(Object.class)) {
            getAllDeclaredFields(list, parentCls);
        }
        return list;
    }

    /**
     * Returns all declared fields of the given class and its ancestor classes
     * 
     * @return
     */
    public static List<Field> getAllDeclaredFields(Class<?> cls) {
        List<Field> result = new ArrayList<Field>();
        return getAllDeclaredFields(result, cls);
    }

    /**
     * Search and return the named filed in the given class. If the field is not
     * found, search its immediate super class until the root of the inheritence
     * tree is reached.
     * 
     * @param cls
     * @param name
     * @return
     * @throws NoSuchFieldException
     */
    public static Field getDeclaredField(Class<? extends Object> cls, String name) throws NoSuchFieldException {
        Field field = null;
        while (!cls.equals(Object.class)) {
            try {
                field = cls.getDeclaredField(name);
                break;
            }
            catch (NoSuchFieldException e) {
                // try the super class;
                cls = cls.getSuperclass();
            }
        }
        if (field == null) {
            throw new NoSuchFieldException(name);
        }
        return field;
    }

    /**
     * Return the log in user. The user should be available from a thread local
     * storage, which is set by a http filter.
     * 
     * @return
     */
    public static String getCurrentUser() {
        // TODO Auto-generated method stub
        return null;
    }

    /**
     * @param one
     * @param fieldName
     * @return
     * @throws IllegalAccessException
     * @throws IllegalArgumentException
     */
    public static Object getValue(CEJobOrderLineItem one, String fieldName) {
        if (one != null) {
            try {
                Field field = one.getClass().getField(fieldName);
                return field.get(one);
            }
            catch (NoSuchFieldException e) {
                e.printStackTrace();
            }
            catch (IllegalArgumentException e) {
                e.printStackTrace();
            }
            catch (IllegalAccessException e) {
                e.printStackTrace();
            }
        }
        return null;
    }

    /**
     * Compare two objects for equality
     * 
     * @param value1
     * @param value2
     * @return
     */
    @SuppressWarnings("unchecked")
    public static int compare(Object value1, Object value2) {
        int result = 0;
        if (value1 == null && value2 == null) {
            result = 0;
        }
        else if (value1 == null) {
            result = -1;
        }
        else if (value2 == null) {
            result = 1;
        }
        else if (value1 instanceof Comparable) {
            result = ((Comparable) value1).compareTo(value2);
        }
        else {
            // just randomly return 1;
            result = 1;
        }
        return result;
    }

    /**
     * Name :copying line item values to cejoborderline item from other popup
     * 
     * @param JobLogCESearchResult[]
     * @param JobLogCEForm
     * @return
     */
    // RQ: This method does not belong here! TODO
    public static void copyCEJobTest(JobTest sessionTest, JobTest formTest) {
        if (sessionTest != null && formTest != null) {
            System.out.println("inside  copy test.....2");
            formTest.setStartDate(sessionTest.getStartDate());
            formTest.setEndDate(sessionTest.getEndDate());
            formTest.setTaskReadyDate(sessionTest.getTaskReadyDate());
            //formTest.setServiceType(sessionTest.getServiceType());
            formTest.setBranchName(sessionTest.getBranchName());
            formTest.setSampleDescription(sessionTest.getSampleDescription());
            formTest.setServiceLocationCode(sessionTest.getServiceLocationCode());
            formTest.setPoNumber(sessionTest.getPoNumber());
            formTest.setFundedAmount(sessionTest.getFundedAmount());
            formTest.setBillingStatus(sessionTest.getBillingStatus());
            formTest.setOperationalStatus(sessionTest.getOperationalStatus());
            formTest.setTaskManagerId(sessionTest.getTaskManagerId());
            // RQ modified the following line
            //formTest.setEstimations(sessionTest.getEstimations());
            formTest.getEstimations().addAll(sessionTest.getEstimations());
            formTest.setCreditOverrideById(sessionTest.getCreditOverrideById());
        }
    }

    public static double doubleValue(Double value) {
        if(value != null){
            return value.doubleValue();
        }
        return 0;
    }

    public static boolean booleanValue(Boolean value) {
        if(value != null){
            return value.booleanValue();
        }
        return false;
    }

    public static int intValue(Integer value) {
        if(value != null){
            return value.intValue();
        }
        return 0;
    }
    
    public static boolean isNullOrEmpty(String val){
        return val == null || val.trim().length() == 0;
    }
    
}
