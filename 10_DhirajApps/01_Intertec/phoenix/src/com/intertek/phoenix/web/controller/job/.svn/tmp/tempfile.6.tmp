/*
 * Copyright © 2009 Intertek Group, plc. All Rights Reserved.
 *  
 * Reproduction or use of this file without express written consent is prohibited.
 */
package com.intertek.phoenix.web.controller.job;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.validation.BindException;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.SimpleFormController;

import com.intertek.entity.CfgContract;
import com.intertek.entity.ContractExpression;
import com.intertek.entity.Control;
import com.intertek.entity.Service;
import com.intertek.exception.ServiceException;
import com.intertek.phoenix.ServiceManager;
import com.intertek.phoenix.dao.Dao;
import com.intertek.phoenix.dao.DaoManager;
import com.intertek.phoenix.entity.CEJobContract;
import com.intertek.phoenix.entity.CEJobOrder;
import com.intertek.phoenix.entity.CEJobOrderLineItem;
import com.intertek.phoenix.entity.JobContractService;
import com.intertek.phoenix.entity.JobContractServiceControl;
import com.intertek.phoenix.entity.JobContractServiceExpression;
import com.intertek.phoenix.job.JobOrderService;

/**
 * Controller for 'Add Service' popup
 * @author rautsmit
 *
 */
public class AddJobServicesController extends SimpleFormController {

    /**
     * Constructs AddJobServicesController instance
     */
    public AddJobServicesController() {
        super();
        setCommandClass(CEServicePopupForm.class);
        setSessionForm(true);
    }

    /* (non-Javadoc)
     * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.Object, org.springframework.validation.BindException)
     */
    protected ModelAndView onSubmit(HttpServletRequest request, HttpServletResponse response, Object command, BindException errors) throws Exception {
        JobOrderService jobOrderService = ServiceManager.getJobOrderService();

        CEServicePopupForm form = (CEServicePopupForm) command;
        Service service = form.getService();
        CEJobContract joco = form.getJobContract();
        String contractCode = joco.getContract().getContractCode();
        Date nominationDate = joco.getJobOrder().getNominationDate();
        String langCD = joco.getInvoiceLanguage();
        String location = joco.getZone();
        CfgContract cfgContract = jobOrderService.getCfgContractByContractId(contractCode, nominationDate);

        if (form.getOperation().equals("selectService")) {

            List<Control> controls = jobOrderService.getServiceControls(cfgContract, service.getServiceId().getServiceName(), nominationDate, langCD);

            ControlForm[] controlForms = new ControlForm[controls.size()];
            for (int i = 0; i < controls.size(); i++) {
                controlForms[i] = new ControlForm((Control) controls.get(i));
            }

            form.setControlForms(controlForms);
        }

        if (form.getOperation().equals("addService")) {
            JobContractService jocoServiceEntity = jobOrderService.createJobContractService(joco.getRootServiceLevel(), service);

            for (ControlForm controlForm : form.getControlForms()) {
                JobContractServiceControl jocoSrvControl = jobOrderService.createJobContractServiceControl(jocoServiceEntity, controlForm.getControl());
                jocoSrvControl.setInputValue0(controlForm.getDataInput());
                jocoServiceEntity.getControls().add(jocoSrvControl);
            }

            List<ContractExpression> coExprList = jobOrderService.getServiceExpressions(cfgContract, service.getServiceId().getServiceName(), location, nominationDate,
                                                                                langCD);

            for (ContractExpression contractExpr : coExprList) {
                JobContractServiceExpression jocoSrvExpr = jocoServiceEntity.createJobContractServiceExpression(contractExpr);
                jocoServiceEntity.getJobContractServiceExpresions().add(jocoSrvExpr);
            }

            Collection<CEJobOrderLineItem> jolis = jobOrderService.updateJobOrderLineItem(joco, joco.getRootServiceLevel(), jocoServiceEntity);
            DaoManager.getDao(JobContractService.class).saveOrUpdate(jocoServiceEntity);
            DaoManager.getDao(CEJobOrderLineItem.class).saveOrUpdate(new ArrayList<CEJobOrderLineItem>(jolis));
        }

        return showForm(request, response, errors);
    }

    /* (non-Javadoc)
     * @see org.springframework.web.servlet.mvc.AbstractFormController#formBackingObject(javax.servlet.http.HttpServletRequest)
     */
    protected Object formBackingObject(HttpServletRequest request) throws Exception {
        try {
            JobOrderService jobSrvc = ServiceManager.getJobOrderService();
            Dao<CEJobOrder> jobDao = DaoManager.getDao(CEJobOrder.class);
            CEJobOrder jo = null;
            String jobNumber = request.getParameter("jobNumber");
            if (jobNumber != null && !"".equals(jobNumber)) {
                jo = jobDao.find(jobNumber);
            }
            if (jo == null) {
                throw new ServiceException("record.not.exist.error", new Object[] { jobNumber }, null);
            }

            CEJobContract jobContract = jo.getJobContract();
            String contractCode = jobContract.getContract().getContractCode();
            Date nominationDate = jo.getNominationDate();
            String langCD = jobContract.getInvoiceLanguage();

            CfgContract cfgContract = jobSrvc.getCfgContractByContractId(contractCode, nominationDate);
            List<Service> services = jobSrvc.getServices(cfgContract, nominationDate, langCD);
            return new CEServicePopupForm(jobContract, services);
        }
        catch (Exception e) {
            e.printStackTrace();
            throw e;
        }
    }
}
