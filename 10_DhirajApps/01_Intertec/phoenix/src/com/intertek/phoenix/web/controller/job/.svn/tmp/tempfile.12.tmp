/*
 * Copyright © 2009 Intertek Group, plc. All Rights Reserved.
 *  
 * Reproduction or use of this file without express written consent is prohibited.
 */
package com.intertek.phoenix.web.controller.job;

import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.validation.BindException;
import org.springframework.web.bind.ServletRequestDataBinder;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.SimpleFormController;
import org.springframework.web.servlet.view.RedirectView;

import com.intertek.entity.Test;
import com.intertek.exception.ServiceException;
import com.intertek.phoenix.ServiceManager;
import com.intertek.phoenix.common.Form;
import com.intertek.phoenix.dao.Dao;
import com.intertek.phoenix.dao.DaoManager;
import com.intertek.phoenix.entity.CEJobOrder;
import com.intertek.phoenix.entity.DepositInvoice;
import com.intertek.phoenix.entity.JobServiceLevel;
import com.intertek.phoenix.entity.JobTest;
import com.intertek.phoenix.entity.ProjectType;
import com.intertek.phoenix.job.JobOrderService;
import com.intertek.phoenix.job.ServiceLevel.ServiceLevelType;

// TODO: Auto-generated Javadoc
/**
 * The Class JobOperationalInstrCEFormController.
 * 
 * @author eric.nguyen/patni
 */
public class JobOperationalInstrCEFormController extends SimpleFormController {

    /** The log. */
    private static Log log = LogFactory.getLog(JobOperationalInstrCEFormController.class);

    /**
     * Instantiates a new job operational instr ce form controller.
     */
    public JobOperationalInstrCEFormController() {
        super();
        setCommandClass(CEJobOrderForm.class);
        setSessionForm(true);
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax
     *      .servlet.http.HttpServletRequest,
     *      javax.servlet.http.HttpServletResponse, java.lang.Object,
     *      org.springframework.validation.BindException)
     */
    /**
     * On submit.
     * 
     * @param request
     *            the request
     * @param response
     *            the response
     * @param command
     *            the command
     * @param errors
     *            the errors
     * 
     * @return the model and view
     * 
     * @throws Exception
     *             the exception
     */
    @SuppressWarnings("unchecked")
    protected ModelAndView onSubmit(HttpServletRequest request, HttpServletResponse response, Object command, BindException errors) throws Exception {

        log.debug("inside on Submit in JobOperationalInstrCEFormController");
        CEJobOrderForm ceJobOrderForm = (CEJobOrderForm) command;
        int prodIndex = ceJobOrderForm.getProdIndex();
        int testIndex = ceJobOrderForm.getTestIndex();
        int splitIndex = ceJobOrderForm.getSplitIndex();
        String addOrDeleteTestLine = request.getParameter("addOrDeleteTestLines");
        String addOrDeleteDepositLine = request.getParameter("addOrDeleteDepositLines");
        String addOrDeleteSplitLine = request.getParameter("addOrDeleteSplitLines");
        String scrollflag = request.getParameter("scrollFlag");

        if (scrollflag != null && !scrollflag.trim().equals("")) {
            ceJobOrderForm.setScrollFlag(scrollflag);
        }
        CEJobOrder ceJobOrder = ceJobOrderForm.getCeJobOrder();
        JobOrderService jobSrvc = ServiceManager.getJobOrderService();

        Dao<CEJobOrder> dao = DaoManager.getDao(CEJobOrder.class);
        CEJobOrder jobOrder1 = dao.find(ceJobOrder.getJobNumber());
        // ceJobOrder =
        // jobSrvc.findById(CEJobOrder.class,ceJobOrder.getJobNumber());
        

        //to merge the product group and product into service level name
        if (ceJobOrderForm.getProducts() != null && ceJobOrderForm.getProducts().size() > 0) {
            for (ServiceLevelForm jsf : ceJobOrderForm.getProducts()) {
                jsf.updateServiceLevelName();
                System.out.println("service level name"+ jsf.getProduct().getServiceLevelName());
                System.out.println("Product Group Name "+ jsf.getProductGroup());
                System.out.println("Product  Name "+ jsf.getProductName());
            }
        }
       // end 
        ceJobOrder = dao.merge(ceJobOrder);
        ceJobOrderForm.setJo(ceJobOrder);
        
        if ((addOrDeleteTestLine != null) && ("addProduct".equals(addOrDeleteTestLine) || "deleteProduct".equals(addOrDeleteTestLine))) {
            if ("addProduct".equals(addOrDeleteTestLine)) {

                // Dao<CEJobOrder> dao=DaoManager.getDao(CEJobOrder.class);
                // CEJobOrder jobOrder1 = dao.find(ceJobOrder.getJobNumber());
                // //ceJobOrder =
                // jobSrvc.findById(CEJobOrder.class,ceJobOrder.getJobNumber());
                // ceJobOrder = dao.merge(ceJobOrder);
                JobServiceLevel product = jobSrvc.createJobServiceLevel(ceJobOrder.getRootServiceLevel(), ServiceLevelType.PRODUCT, "");
                ceJobOrderForm.addServiceForm(product);
            }
            else if ("deleteProduct".equals(addOrDeleteTestLine)) {
                // ceJobOrder =
                // jobSrvc.findById(CEJobOrder.class,ceJobOrder.getJobNumber());
                ServiceLevelForm sf = ceJobOrderForm.getServiceLevelForm(prodIndex);
                JobServiceLevel serviceLevel = sf.getProduct();
                // serviceLevel =jobSrvc.findById(JobServiceLevel.class,
                // serviceLevel.getId());
                // jobSrvc.removeJobServiceLevel(ceJobOrder.getRootServiceLevel(),
                // serviceLevel);
                ceJobOrderForm.removeServiceLevelForm(sf);
            }
            ceJobOrderForm.setAddOrDeleteTestLines("none");
            return showForm(request, response, errors);
        }
        if ((addOrDeleteTestLine != null) && ("addTest".equals(addOrDeleteTestLine) || "deleteTest".equals(addOrDeleteTestLine))) {
            JobOrderService ceService = ServiceManager.getCEJobService();
            ServiceLevelForm serviceForm = ceJobOrderForm.getServiceLevelForm(prodIndex);
            // ceJobOrder =
            // jobSrvc.findById(CEJobOrder.class,ceJobOrder.getJobNumber());
            // JobServiceLevel product = jobSrvc.findById(JobServiceLevel.class,
            // serviceForm.getProduct().getId());
            
            //JobServiceLevel product = serviceForm.getProduct();
            
            JobServiceLevel product = jobSrvc.findById(JobServiceLevel.class,new Long(prodIndex));
            //serviceForm.setProduct(product);
            if ("addTest".equals(addOrDeleteTestLine)) {
                CETestSearchForm addTestForm = (CETestSearchForm) request.getSession()
                        .getAttribute("com.intertek.phoenix.web.controller.job.AddTestController.FORM.command");
                if (addTestForm == null) {
                    addTestForm = (CETestSearchForm) request.getSession().getAttribute("CETestSearchForm");
                }
                List<Test> selectedTests = addTestForm.getSelectedTests();

                for (Test test1 : selectedTests) {
                    test1 = ceService.findById(Test.class, test1.getTestId());
                    JobTest jTest = ceService.createJobTest(product, test1);
                    jTest.setBranchName(ceJobOrder.getBranchName());
                }
            }
            else if ("deleteTest".equals(addOrDeleteTestLine)) {
                ServiceLevelForm sf = ceJobOrderForm.getServiceLevelForm(prodIndex);
                product = sf.getProduct();
                // product = jobSrvc.findById(JobServiceLevel.class,
                // product.getId());
                //JobTest jobTest = sf.getJobTest()[testIndex];
                
                JobTest jobTest = jobSrvc.findById(JobTest.class, Long.valueOf(testIndex));
                jobSrvc.removeJobTest(jobTest);
                DaoManager.getDao(JobTest.class).remove(jobTest);
                //jobSrvc.removeJobTest(/* sf.getProduct(), */jobTest);
                // sf.setProduct(jobSrvc.findById(JobServiceLevel.class,
                // product.getId()));
            }
            ceJobOrderForm.setAddOrDeleteTestLines("none");
            jobSrvc.updateJobOrder(ceJobOrder);
            ceJobOrder = jobSrvc.findById(CEJobOrder.class, ceJobOrder.getJobNumber());
            ceJobOrderForm.setJo(ceJobOrder);
            return showForm(request, response, errors);
        }
        if ((addOrDeleteTestLine != null) && "saveother".equals(addOrDeleteTestLine)) {

            String key = prodIndex + "," + testIndex + "," + splitIndex;
            HttpSession session = request.getSession();
            HashMap<String, JobTest> testMap = (HashMap<String, JobTest>) session.getAttribute("TestAttribute");
            ServiceLevelForm sf = ceJobOrderForm.getServiceLevelForm(prodIndex);
            if (testMap != null && testMap.get(key) != null) {
                JobTest sessionTest = testMap.get(key);
                System.out.println("JobTest ID after Other Popup call <<<<<<<<<<<<<<<<<<<>" + sessionTest.getId());
                // RQ: need to reload JobTest
                // JobTest ceJobTest = sf.getJobTest()[testIndex];
                // Dao<JobTest> jDao = DaoManager.getDao(JobTest.class);
                // ceJobTest = jDao.merge(sessionTest);
                // CommonUtil.copyCEJobTest(sessionTest, ceJobTest);
                // JobTest newTest=jobSrvc.findById(JobTest.class,
                // sessionTest.getId());

                // JobServiceLevel product = sf.getProduct();
                // product= jobSrvc.findById(JobServiceLevel.class,
                // product.getId());
                // sf.setProduct(product);
                if (splitIndex == -1) {
                    // sf.getJobTest()[testIndex] = newTest;
                }
                else {
                    // sf.getJobTest()[testIndex].getSplit()[splitIndex]=newTest;
                }
            }

            ceJobOrder = jobSrvc.findById(CEJobOrder.class, ceJobOrder.getJobNumber());
            ceJobOrderForm.setJo(ceJobOrder);

            ceJobOrderForm.setAddOrDeleteTestLines("none");
            return showForm(request, response, errors);
        }
        if ((addOrDeleteDepositLine != null) && ("adddep".equals(addOrDeleteDepositLine) || "deldep".equals(addOrDeleteDepositLine))) {
            // CEJobOrder jo = ceJobOrderForm.getCeJobOrder();
            if ("adddep".equals(addOrDeleteDepositLine)) {
                // jo= jobSrvc.findById(CEJobOrder.class,jo.getJobNumber() );
                DepositInvoice dpInvoice = jobSrvc.createDepositInvoice(ceJobOrder);
                jobSrvc.addDepositInvoice(ceJobOrder, dpInvoice);
                ceJobOrder = jobSrvc.findById(CEJobOrder.class, ceJobOrder.getJobNumber());
                ceJobOrderForm.setJo(ceJobOrder);
            }
            else {
                int depInd = ceJobOrderForm.getDepIndex();
                // jo= jobSrvc.findById(CEJobOrder.class,jo.getJobNumber() );
                Object[] obj = ceJobOrderForm.getCeJobOrder().getDepositInvoices().toArray();
                if (obj.length > depInd) {
                    DepositInvoice rDepInvoice = (DepositInvoice) obj[depInd];
                    rDepInvoice = jobSrvc.findById(DepositInvoice.class, rDepInvoice.getId());
                    jobSrvc.removeDepositInvoice(ceJobOrder, rDepInvoice);
                    // jo=jobSrvc.findById(CEJobOrder.class,jo.getJobNumber() );
                }
            }
            // ceJobOrderForm.setJo(ceJobOrder);
            // jobSrvc.updateJobOrder(ceJobOrder);
            ceJobOrderForm.setAddOrDeleteDepositLines("none");
            ceJobOrder = jobSrvc.findById(CEJobOrder.class, ceJobOrder.getJobNumber());
            ceJobOrderForm.setJo(ceJobOrder);
            return showForm(request, response, errors);
        }
        if ((addOrDeleteSplitLine != null) && ("addspl".equals(addOrDeleteSplitLine) || "delspl".equals(addOrDeleteSplitLine))) {
            if ("addspl".equals(addOrDeleteSplitLine)) {
<<<<<<< .mine
                // TODO: need to add method for createRelatedJobTest in service
                //ServiceLevelForm sf = ceJobOrderForm.getServiceLevelForm(prodIndex);
                
               // JobTest jobTest = sf.getJobTest()[testIndex];
                JobTest jobTest = jobSrvc.findById(JobTest.class, new Long(testIndex));
                // jobTest = jobSrvc.findById(JobTest.class, jobTest.getId());
                DaoManager.getDao(JobTest.class).merge(jobTest);
                JobTest newRelatedJobTest = jobSrvc.createRelatedJobTest(jobTest.getJobServiceLevel(), jobTest.getTest(), jobTest);
//                JobTest newRelatedJobTest = new JobTest();
//                newRelatedJobTest.setTest(jobTest.getTest());
//                newRelatedJobTest.setJobServiceLevel(jobTest.getJobServiceLevel());
//                newRelatedJobTest.setJobServiceLevelId(jobTest.getJobServiceLevelId());
//                newRelatedJobTest.setTestId(jobTest.getTestId());
//                newRelatedJobTest.setQuantity(Constants.DEFAULT_TEST_SLATE_QTY);
//                newRelatedJobTest.setOt(false);
//                newRelatedJobTest.setLineDescription(jobTest.getTest().getTestDescription());
//                newRelatedJobTest.setMaster(jobTest);
//                newRelatedJobTest.setMasterId(jobTest.getId());
//                jobTest.addRelated(newRelatedJobTest);
                try {
                    
                    DaoManager.getDao(JobTest.class).saveOrUpdate(newRelatedJobTest);
                    
=======
                JobTest jobTest = jobSrvc.findById(JobTest.class, new Long(testIndex));
                CETestSearchForm addTestForm = (CETestSearchForm) request.getSession().getAttribute("com.intertek.phoenix.web.controller.job.AddTestController.FORM.command");
                if (addTestForm == null) {
                    addTestForm = (CETestSearchForm) request.getSession().getAttribute("CETestSearchForm");
>>>>>>> .r6341
                }
                List<Test> selectedTests = addTestForm.getSelectedTests();
                for (Test test1 : selectedTests) {
                    test1 = jobSrvc.findById(Test.class, test1.getTestId());
                    JobTest newRelatedJobTest = jobSrvc.createRelatedJobTest(jobTest.getJobServiceLevel(), test1, jobTest);
                    newRelatedJobTest.setBranchName(ceJobOrder.getBranchName());
                }
<<<<<<< .mine
                // JobServiceLevel sl =jobSrvc.findById(JobServiceLevel.class,
                // sf.getProduct().getId());
                // sf.setProduct(sl);
=======
//                JobTest newRelatedJobTest = jobSrvc.createRelatedJobTest(jobTest.getJobServiceLevel(), jobTest.getTest(), jobTest);
                DaoManager.getDao(JobTest.class).merge(jobTest);
>>>>>>> .r6341
            }
<<<<<<< .mine
            else if ("delspl".equals(addOrDeleteSplitLine)) {
                ServiceLevelForm sf = ceJobOrderForm.getServiceLevelForm(prodIndex);
                //JobTest jobTest = sf.getJobTest()[testIndex];
                JobTest jobTest = jobSrvc.findById(JobTest.class, new Long(splitIndex));
                DaoManager.getDao(JobTest.class).remove(jobTest);
                // jobTest = jobSrvc.findById(JobTest.class, jobTest.getId());
                JobTest childTest = jobTest.getSplit()[splitIndex];
=======
            else if ("delspl".equals(addOrDeleteSplitLine)) {                
                JobTest jobTest = jobSrvc.findById(JobTest.class, new Long(splitIndex));
                DaoManager.getDao(JobTest.class).remove(jobTest);
                JobTest childTest = jobTest.getSplit()[splitIndex];
>>>>>>> .r6341
                jobSrvc.removeJobTest(childTest);
<<<<<<< .mine
                // jobTest = jobSrvc.findById(JobTest.class, jobTest.getId());
                // sf.getJobTest()[testIndex]=jobTest;
                // JobServiceLevel sl =jobSrvc.findById(JobServiceLevel.class,
                // sf.getProduct().getId());
                // sf.setProduct(sl);
=======
>>>>>>> .r6341
            }
            ceJobOrderForm.setAddOrDeleteSplitLines("none");
            ceJobOrder = jobSrvc.findById(CEJobOrder.class, ceJobOrder.getJobNumber());
            ceJobOrderForm.setJo(ceJobOrder);
            return showForm(request, response, errors);
        }
        if ((addOrDeleteTestLine != null) && ("save".equals(addOrDeleteTestLine) || "saveandnext".equals(addOrDeleteTestLine))) {
            //
            if (ceJobOrderForm.getProducts() != null && ceJobOrderForm.getProducts().size() > 0) {
                for (ServiceLevelForm jsf : ceJobOrderForm.getProducts()) {
                    jsf.updateServiceLevelName();
                }
            }
            CEJobOrder jobOrder = ceJobOrderForm.getCeJobOrder();
            jobSrvc.updateJobOrder(jobOrder);
            // JobOrderService service = ServiceManager.getJobOrderService();
            // service.updateJobInstructions(jobOrder);
            // service.updateJobOrder(jobOrder);
            // service.updateCEJobTest(jobOrder);
            // service.updateJobOrder(jobOrder);
            // service.updateDepositInvoice(jobOrder);
            // service.updateJobOrder(jobOrder);
            ceJobOrderForm.setAddOrDeleteTestLines("none");
            if ("save".equals(addOrDeleteTestLine)) {

                ceJobOrder = jobSrvc.findById(CEJobOrder.class, ceJobOrder.getJobNumber());
                ceJobOrderForm.setJo(ceJobOrder);
                return showForm(request, response, errors);
            }
        }
        return new ModelAndView(new RedirectView("phx_ce_job_select_charges.htm?jobNumber=" + ceJobOrderForm.getJobNumber()));
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.springframework.web.servlet.mvc.SimpleFormController#suppressValidation(javax.servlet.http.HttpServletRequest,
     *      java.lang.Object)
     */
    @SuppressWarnings("deprecation")
    protected boolean suppressValidation(HttpServletRequest request, Object command) {
        String refreshing = request.getParameter("refreshing");

        if ((refreshing != null) && "true".equals(refreshing)) {
            return true;
        }
        String addOrDeleteTestLine = request.getParameter("addOrDeleteTestLines");
        if (addOrDeleteTestLine != null && "save".equals(addOrDeleteTestLine)) {
            System.out.println("calling suppress Validation");
            return super.suppressValidation(request, command);
        }
        // if ((addOrDeleteTestLine != null)) {
        // return true;
        // }
        // String addOrDeleteDepositLine =
        // request.getParameter("addOrDeleteDepositLines");
        // if ((addOrDeleteDepositLine != null) &&
        // ("adddep".equals(addOrDeleteDepositLine))) {
        // return true;
        // }
        // String addOrDeleteSplitLine =
        // request.getParameter("addOrDeleteSplitLines");
        // if ((addOrDeleteSplitLine != null) &&
        // ("addspl".equals(addOrDeleteSplitLine))) {
        // return true;
        // }
        // System.out.println("calling suppress Validation..1");
        // return super.suppressValidation(request, command);
        return true;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.springframework.web.servlet.mvc.BaseCommandController#initBinder(javax.servlet.http.HttpServletRequest,
     *      org.springframework.web.bind.ServletRequestDataBinder)
     */
    protected void initBinder(HttpServletRequest request, ServletRequestDataBinder binder) throws Exception {
        SimpleDateFormat dateFormat = new SimpleDateFormat(Form.getCurrentUserFormat());
        dateFormat.setLenient(false);
        binder.registerCustomEditor(java.util.Date.class, null, new CustomDateEditor(dateFormat, true));
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.springframework.web.servlet.mvc.AbstractFormController#formBackingObject(javax.servlet.http.HttpServletRequest)
     */
    protected Object formBackingObject(HttpServletRequest request) throws Exception {
        String jobNumber = request.getParameter("jobNumber");
        CEJobOrder jo = null;
        JobOrderService jobOrderService = ServiceManager.getJobOrderService();
<<<<<<< .mine

        // jo = ServiceManager.getJobOrderService().getCEJobOrder(jobNumber);
        Dao<CEJobOrder> jobDao = DaoManager.getDao(CEJobOrder.class);
        if (jobNumber != null && !"".equals(jobNumber.trim())) {
            // jo.setJobNumber(jobNumber);
            try {
                jo = jobOrderService.findById(CEJobOrder.class, jobNumber);
                jobOrderService.setDefaultInstructions(jo);
                jobOrderService.updateJobOrder(jo);

                // jo = jobDao.find(jobNumber);
            }
            catch (Exception e) {
                throw new ServiceException("record.not.exist.error", new Object[] { jobNumber }, e);
            }
=======
        Dao<CEJobOrder> jobDao = DaoManager.getDao(CEJobOrder.class);
        if (jobNumber != null && !"".equals(jobNumber.trim())) {
            // jo.setJobNumber(jobNumber);
            try {
                jo = jobOrderService.findById(CEJobOrder.class, jobNumber);
                jobOrderService.setDefaultInstructions(jo);
                //TODOD: Project type is currently empty, temporary set it to Type2
                if(jo.getProjectType()==null){
                    jo.setProjectType(ProjectType.TYPE_2);
                }
                jobOrderService.updateJobOrder(jo);
            }
            catch (Exception e) {
                throw new ServiceException("record.not.exist.error", new Object[] { jobNumber }, e);
            }
>>>>>>> .r6341
        }
        CEJobOrderForm myForm = new CEJobOrderForm(jo);
        return myForm;
    }

}
