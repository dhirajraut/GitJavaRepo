Exception Handling
	Definition : 	It is an abnormal condition that arises in a code sequence at run time.
			These are Run Time Errors.
	Exception is an Object that is created when error occurs, thrown from the method that
		cause an error.  The same method may choose to handle exception  or may pass it
		on.  At some point, exception is passed and processed.
	Exceptions can be generated by Java RunTime system or programmers code may generate and
		handle exceptions.

	All exceptions are subclasses of built-in class Throwable.  The Throwable class has main
		two subclasses-- 1. Exceptions	2. Errors

		Exceptions : This class is used for all exceptional conditions including Runtime
			and User defined exceptions.  The runtime exceptions are like Division
			by zero, Array index out of bounds.  The runtime exceptions are managed
			by a subclass RuntimeExceptions of Exceptions.
		Errors : It defines exceptions that are not to be caught under normal circomsta-
			nces by a program.  The errors are uses by Java Runtime System to indi-
			cate errors which occure with Runtime Environment like, Stack Overflow.
			These errors are not handled by the program codes.
	
	Exceptions :
	java exceptions are handled by five keywords: try, catch, finally, throw, throws.
	try : Program statements which are to monitor for errors are put in try block.
		If exception occurs, it is thrown by JVM.
	catch : A thrown exception is catched by the catch block.  The codes to overcome error
		are written here.
	finally : This block is executed after execution of any catch block or even no catch block
		is executed.  So, this block should contain statements which are to be executed after
		any of the catch block is executed or even no catch block is executed.
	throw :  To manually throw an exception, keyword 'throw' is used.  While designing user
		defined abnormal conditions, this clause is used to throw an exception on abno-
		normal situation.  System generated exceptions are automatically thrown and one
		need not use this key word in the program for the same.
	throws : The method which is entitled to throw exception, must be specifed with this 
		clause along with names of Exceptions, a method is throwing.

	Uncaught Exceptions : If user does not handle exceptions in program, and Java runtime
		system's default handler has to take care of throwing exception, catching and
		displaying Print stack and terminating program.  As if an exception is not
		catched by program codes are known as Uncaught Exceptions.  The Arithmetic
		Exceptions are Uncaught exceptions because, if program does not catch them in
		codes, the default handler calls them.  The default handler displays a string
		describing the exception, prints a stack trace from the point at which exception
		occured and terminates program.
	Catching Exceptions : Although default handler manages exceptions of its own, does not
		allow following...
		* Does not allow fixing the errors in the program.
		* Terminates program automatically.
		To overcome these problems, try catch blocks are the solution.
		as Uncaught Exceptions.
		Multiple catch blocks can be written immediately below the try block.  The order
		of the catch block should be -- The sub-sub exception, sub exception, exception.

	The goal of most well constructed catch clause should be to resolve the exceptional
		condition and then continue on as if the error had not happened.

	Generic Execption Catch:
		The super class of all exceptions is 'Exception'.  Catching an exception using
		this clause is a Generic Exception.  In case of multiple catchs, if present, the
		generic clause should be the last catch block.

	Nested try statements...
		A try-catch blocks inside outer try-catch block.
		If inner try-catch block encounters error but does not find error handler(proper
		catch), an error handler is searched in outside try-catch block.  Such searching
		is carried out in all upper levels till proper catch is found.  If proper catch
		is not found at all, the default handler of Java Runtime system handles the error.

		Try catch blocks in function with in functions.
		Consider a function having try catch block and within try catch block is calling
		a function which also has a try catch block.  The try-catch of inner function if
		encounters error and overcome by catch body, executes the statements in normal
		way after overcoming/executing catch block.  If proper catch block is not found,
		JVM searches for proper catch block in the outer function and if found, overcomes
		the exception and continue normal execution from outer function onwords.
		If proper catch block is also not found at outer function, a search for prper
		catch block is contiued in further outer catch blocks till it can.  And if at all
		proper catch block is not found, the default error handler takes rest of the care.

	Try-Catch within inheritance
		The subclass has encountered exception and overcome it in self catch.  After exe-
		cuting catch, the statements below catch are executed and execution runs through
		all super classes in normal way executing statements below catch in every super
		class.
			If subclass encounters exception but does not have proper catch or does
		not have try catch atall, a search for proper try catch is carried out in super
		class.  If found, it is well and good to execute rest of the part in normal
		manner.
		If super has taken care of try-catch block, its subclass may avoid using try-
		catch block.

	
